// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: fetchers.sql

package orm

import (
	"context"
	"database/sql"
)

const addFetcher = `-- name: AddFetcher :one
INSERT INTO fetchers(id, api_id, api_hash)
VALUES ($1, $2, $3)
RETURNING id, api_id, api_hash
`

type AddFetcherParams struct {
	ID      int64
	ApiID   sql.NullInt64
	ApiHash sql.NullString
}

func (q *Queries) AddFetcher(ctx context.Context, arg AddFetcherParams) (Fetcher, error) {
	row := q.db.QueryRowContext(ctx, addFetcher, arg.ID, arg.ApiID, arg.ApiHash)
	var i Fetcher
	err := row.Scan(&i.ID, &i.ApiID, &i.ApiHash)
	return i, err
}

const deleteFetcher = `-- name: DeleteFetcher :exec
DELETE FROM fetchers
WHERE id = $1
`

func (q *Queries) DeleteFetcher(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteFetcher, id)
	return err
}

const getEmptyFetcher = `-- name: GetEmptyFetcher :one
SELECT id FROM fetchers
ORDER BY RANDOM()
LIMIT 1
`

func (q *Queries) GetEmptyFetcher(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, getEmptyFetcher)
	var id int64
	err := row.Scan(&id)
	return id, err
}
