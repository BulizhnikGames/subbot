// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: fetchers.sql

package orm

import (
	"context"
)

const addFetcher = `-- name: AddFetcher :one
INSERT INTO fetchers(id, phone, ip, port)
VALUES ($1, $2, $3, $4)
ON CONFLICT (id) DO UPDATE
SET phone = $2, ip = $3, port = $4
RETURNING id, phone, ip, port
`

type AddFetcherParams struct {
	ID    int64
	Phone string
	Ip    string
	Port  string
}

func (q *Queries) AddFetcher(ctx context.Context, arg AddFetcherParams) (Fetcher, error) {
	row := q.db.QueryRowContext(ctx, addFetcher,
		arg.ID,
		arg.Phone,
		arg.Ip,
		arg.Port,
	)
	var i Fetcher
	err := row.Scan(
		&i.ID,
		&i.Phone,
		&i.Ip,
		&i.Port,
	)
	return i, err
}

const checkFetcher = `-- name: CheckFetcher :one
SELECT COUNT(1)
FROM fetchers
WHERE id = $1
`

func (q *Queries) CheckFetcher(ctx context.Context, id int64) (int64, error) {
	row := q.db.QueryRowContext(ctx, checkFetcher, id)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const deleteFetcher = `-- name: DeleteFetcher :exec
DELETE FROM fetchers
WHERE id = $1
`

func (q *Queries) DeleteFetcher(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteFetcher, id)
	return err
}

const getLeastFullFetcher = `-- name: GetLeastFullFetcher :one
SELECT fetchers.ip, fetchers.port
FROM fetchers JOIN channels
ON fetchers.id = channels.stored_at
GROUP BY fetchers.id
ORDER BY COUNT(*) ASC
LIMIT 1
`

type GetLeastFullFetcherRow struct {
	Ip   string
	Port string
}

func (q *Queries) GetLeastFullFetcher(ctx context.Context) (GetLeastFullFetcherRow, error) {
	row := q.db.QueryRowContext(ctx, getLeastFullFetcher)
	var i GetLeastFullFetcherRow
	err := row.Scan(&i.Ip, &i.Port)
	return i, err
}
