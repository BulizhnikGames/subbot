// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: channels.sql

package orm

import (
	"context"
)

const addChannel = `-- name: AddChannel :one
INSERT INTO channels(id, hash, username, stored_at)
VALUES($1, $2, $3, $4)
RETURNING id, hash, username, stored_at
`

type AddChannelParams struct {
	ID       int64
	Hash     int64
	Username string
	StoredAt int64
}

func (q *Queries) AddChannel(ctx context.Context, arg AddChannelParams) (Channel, error) {
	row := q.db.QueryRowContext(ctx, addChannel,
		arg.ID,
		arg.Hash,
		arg.Username,
		arg.StoredAt,
	)
	var i Channel
	err := row.Scan(
		&i.ID,
		&i.Hash,
		&i.Username,
		&i.StoredAt,
	)
	return i, err
}

const changeChannelUsername = `-- name: ChangeChannelUsername :exec
UPDATE channels
SET username = $2
WHERE id = $1
`

type ChangeChannelUsernameParams struct {
	ID       int64
	Username string
}

func (q *Queries) ChangeChannelUsername(ctx context.Context, arg ChangeChannelUsernameParams) error {
	_, err := q.db.ExecContext(ctx, changeChannelUsername, arg.ID, arg.Username)
	return err
}

const changeChannelUsernameAndHash = `-- name: ChangeChannelUsernameAndHash :exec
UPDATE channels
SET username = $2, hash = $3
WHERE id = $1
`

type ChangeChannelUsernameAndHashParams struct {
	ID       int64
	Username string
	Hash     int64
}

func (q *Queries) ChangeChannelUsernameAndHash(ctx context.Context, arg ChangeChannelUsernameAndHashParams) error {
	_, err := q.db.ExecContext(ctx, changeChannelUsernameAndHash, arg.ID, arg.Username, arg.Hash)
	return err
}

const deleteChannel = `-- name: DeleteChannel :exec
DELETE FROM channels
WHERE id = $1
`

func (q *Queries) DeleteChannel(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteChannel, id)
	return err
}

const getUsernamesOfGroupSubs = `-- name: GetUsernamesOfGroupSubs :many
SELECT channels.username FROM channels
JOIN subs ON channels.id = subs.channel
WHERE subs.chat = $1
`

func (q *Queries) GetUsernamesOfGroupSubs(ctx context.Context, chat int64) ([]string, error) {
	rows, err := q.db.QueryContext(ctx, getUsernamesOfGroupSubs, chat)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var username string
		if err := rows.Scan(&username); err != nil {
			return nil, err
		}
		items = append(items, username)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
